{"version":3,"sources":["webpack:///./node_modules/create-hmac/browser.js","webpack:///./node_modules/create-hmac/legacy.js"],"names":["inherits","Legacy","Base","Buffer","md5","RIPEMD160","sha","ZEROS","alloc","Hmac","alg","key","call","this","from","blocksize","_alg","_key","length","hash","update","digest","concat","ipad","_ipad","allocUnsafe","opad","_opad","i","_hash","prototype","_update","data","_final","h","module","exports","toLowerCase","push"],"mappings":"mHACA,IAAIA,EAAW,EAAQ,QACnBC,EAAS,EAAQ,QACjBC,EAAO,EAAQ,QACfC,EAAS,EAAQ,QAAeA,OAChCC,EAAM,EAAQ,QACdC,EAAY,EAAQ,QAEpBC,EAAM,EAAQ,QAEdC,EAAQJ,EAAOK,MAAM,KAEzB,SAASC,EAAMC,EAAKC,GAClBT,EAAKU,KAAKC,KAAM,UACG,kBAARF,IACTA,EAAMR,EAAOW,KAAKH,IAGpB,IAAII,EAAqB,WAARL,GAA4B,WAARA,EAAoB,IAAM,GAI/D,GAFAG,KAAKG,KAAON,EACZG,KAAKI,KAAON,EACRA,EAAIO,OAASH,EAAW,CAC1B,IAAII,EAAe,WAART,EAAmB,IAAIL,EAAcC,EAAII,GACpDC,EAAMQ,EAAKC,OAAOT,GAAKU,cACdV,EAAIO,OAASH,IACtBJ,EAAMR,EAAOmB,OAAO,CAACX,EAAKJ,GAAQQ,IAMpC,IAHA,IAAIQ,EAAOV,KAAKW,MAAQrB,EAAOsB,YAAYV,GACvCW,EAAOb,KAAKc,MAAQxB,EAAOsB,YAAYV,GAElCa,EAAI,EAAGA,EAAIb,EAAWa,IAC7BL,EAAKK,GAAc,GAATjB,EAAIiB,GACdF,EAAKE,GAAc,GAATjB,EAAIiB,GAEhBf,KAAKgB,MAAgB,WAARnB,EAAmB,IAAIL,EAAcC,EAAII,GACtDG,KAAKgB,MAAMT,OAAOG,GAGpBvB,EAASS,EAAMP,GAEfO,EAAKqB,UAAUC,QAAU,SAAUC,GACjCnB,KAAKgB,MAAMT,OAAOY,IAGpBvB,EAAKqB,UAAUG,OAAS,WACtB,IAAIC,EAAIrB,KAAKgB,MAAMR,SACfF,EAAqB,WAAdN,KAAKG,KAAoB,IAAIX,EAAcC,EAAIO,KAAKG,MAC/D,OAAOG,EAAKC,OAAOP,KAAKc,OAAOP,OAAOc,GAAGb,UAG3Cc,EAAOC,QAAU,SAAqB1B,EAAKC,GAEzC,OADAD,EAAMA,EAAI2B,cACE,WAAR3B,GAA4B,cAARA,EACf,IAAID,EAAK,SAAUE,GAEhB,QAARD,EACK,IAAIT,EAAOG,EAAKO,GAElB,IAAIF,EAAKC,EAAKC,K,kCC3DvB,IAAIX,EAAW,EAAQ,QACnBG,EAAS,EAAQ,QAAeA,OAEhCD,EAAO,EAAQ,QAEfK,EAAQJ,EAAOK,MAAM,KACrBO,EAAY,GAEhB,SAASN,EAAMC,EAAKC,GAClBT,EAAKU,KAAKC,KAAM,UACG,kBAARF,IACTA,EAAMR,EAAOW,KAAKH,IAGpBE,KAAKG,KAAON,EACZG,KAAKI,KAAON,EAERA,EAAIO,OAASH,EACfJ,EAAMD,EAAIC,GACDA,EAAIO,OAASH,IACtBJ,EAAMR,EAAOmB,OAAO,CAACX,EAAKJ,GAAQQ,IAMpC,IAHA,IAAIQ,EAAOV,KAAKW,MAAQrB,EAAOsB,YAAYV,GACvCW,EAAOb,KAAKc,MAAQxB,EAAOsB,YAAYV,GAElCa,EAAI,EAAGA,EAAIb,EAAWa,IAC7BL,EAAKK,GAAc,GAATjB,EAAIiB,GACdF,EAAKE,GAAc,GAATjB,EAAIiB,GAGhBf,KAAKgB,MAAQ,CAACN,GAGhBvB,EAASS,EAAMP,GAEfO,EAAKqB,UAAUC,QAAU,SAAUC,GACjCnB,KAAKgB,MAAMS,KAAKN,IAGlBvB,EAAKqB,UAAUG,OAAS,WACtB,IAAIC,EAAIrB,KAAKG,KAAKb,EAAOmB,OAAOT,KAAKgB,QACrC,OAAOhB,KAAKG,KAAKb,EAAOmB,OAAO,CAACT,KAAKc,MAAOO,MAE9CC,EAAOC,QAAU3B","file":"js/npm.create-hmac-legacy.d64acb2b.js","sourcesContent":["'use strict'\nvar inherits = require('inherits')\nvar Legacy = require('./legacy')\nvar Base = require('cipher-base')\nvar Buffer = require('safe-buffer').Buffer\nvar md5 = require('create-hash/md5')\nvar RIPEMD160 = require('ripemd160')\n\nvar sha = require('sha.js')\n\nvar ZEROS = Buffer.alloc(128)\n\nfunction Hmac (alg, key) {\n  Base.call(this, 'digest')\n  if (typeof key === 'string') {\n    key = Buffer.from(key)\n  }\n\n  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64\n\n  this._alg = alg\n  this._key = key\n  if (key.length > blocksize) {\n    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)\n    key = hash.update(key).digest()\n  } else if (key.length < blocksize) {\n    key = Buffer.concat([key, ZEROS], blocksize)\n  }\n\n  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)\n  var opad = this._opad = Buffer.allocUnsafe(blocksize)\n\n  for (var i = 0; i < blocksize; i++) {\n    ipad[i] = key[i] ^ 0x36\n    opad[i] = key[i] ^ 0x5C\n  }\n  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)\n  this._hash.update(ipad)\n}\n\ninherits(Hmac, Base)\n\nHmac.prototype._update = function (data) {\n  this._hash.update(data)\n}\n\nHmac.prototype._final = function () {\n  var h = this._hash.digest()\n  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)\n  return hash.update(this._opad).update(h).digest()\n}\n\nmodule.exports = function createHmac (alg, key) {\n  alg = alg.toLowerCase()\n  if (alg === 'rmd160' || alg === 'ripemd160') {\n    return new Hmac('rmd160', key)\n  }\n  if (alg === 'md5') {\n    return new Legacy(md5, key)\n  }\n  return new Hmac(alg, key)\n}\n","'use strict'\nvar inherits = require('inherits')\nvar Buffer = require('safe-buffer').Buffer\n\nvar Base = require('cipher-base')\n\nvar ZEROS = Buffer.alloc(128)\nvar blocksize = 64\n\nfunction Hmac (alg, key) {\n  Base.call(this, 'digest')\n  if (typeof key === 'string') {\n    key = Buffer.from(key)\n  }\n\n  this._alg = alg\n  this._key = key\n\n  if (key.length > blocksize) {\n    key = alg(key)\n  } else if (key.length < blocksize) {\n    key = Buffer.concat([key, ZEROS], blocksize)\n  }\n\n  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)\n  var opad = this._opad = Buffer.allocUnsafe(blocksize)\n\n  for (var i = 0; i < blocksize; i++) {\n    ipad[i] = key[i] ^ 0x36\n    opad[i] = key[i] ^ 0x5C\n  }\n\n  this._hash = [ipad]\n}\n\ninherits(Hmac, Base)\n\nHmac.prototype._update = function (data) {\n  this._hash.push(data)\n}\n\nHmac.prototype._final = function () {\n  var h = this._alg(Buffer.concat(this._hash))\n  return this._alg(Buffer.concat([this._opad, h]))\n}\nmodule.exports = Hmac\n"],"sourceRoot":""}