{"version":3,"sources":["webpack:///./node_modules/evp_bytestokey/index.js"],"names":["Buffer","MD5","EVP_BytesToKey","password","salt","keyBits","ivLen","isBuffer","from","length","RangeError","keyLen","key","alloc","iv","tmp","hash","update","digest","used","keyStart","Math","min","copy","ivStart","fill","module","exports"],"mappings":"uGAAA,IAAIA,EAAS,EAAQ,QAAeA,OAChCC,EAAM,EAAQ,QAGlB,SAASC,EAAgBC,EAAUC,EAAMC,EAASC,GAEhD,GADKN,EAAOO,SAASJ,KAAWA,EAAWH,EAAOQ,KAAKL,EAAU,WAC7DC,IACGJ,EAAOO,SAASH,KAAOA,EAAOJ,EAAOQ,KAAKJ,EAAM,WACjC,IAAhBA,EAAKK,QAAc,MAAM,IAAIC,WAAW,4CAG9C,IAAIC,EAASN,EAAU,EACnBO,EAAMZ,EAAOa,MAAMF,GACnBG,EAAKd,EAAOa,MAAMP,GAAS,GAC3BS,EAAMf,EAAOa,MAAM,GAEvB,MAAOF,EAAS,GAAKL,EAAQ,EAAG,CAC9B,IAAIU,EAAO,IAAIf,EACfe,EAAKC,OAAOF,GACZC,EAAKC,OAAOd,GACRC,GAAMY,EAAKC,OAAOb,GACtBW,EAAMC,EAAKE,SAEX,IAAIC,EAAO,EAEX,GAAIR,EAAS,EAAG,CACd,IAAIS,EAAWR,EAAIH,OAASE,EAC5BQ,EAAOE,KAAKC,IAAIX,EAAQI,EAAIN,QAC5BM,EAAIQ,KAAKX,EAAKQ,EAAU,EAAGD,GAC3BR,GAAUQ,EAGZ,GAAIA,EAAOJ,EAAIN,QAAUH,EAAQ,EAAG,CAClC,IAAIkB,EAAUV,EAAGL,OAASH,EACtBG,EAASY,KAAKC,IAAIhB,EAAOS,EAAIN,OAASU,GAC1CJ,EAAIQ,KAAKT,EAAIU,EAASL,EAAMA,EAAOV,GACnCH,GAASG,GAKb,OADAM,EAAIU,KAAK,GACF,CAAEb,IAAKA,EAAKE,GAAIA,GAGzBY,EAAOC,QAAUzB","file":"js/npm.evp_bytestokey-legacy.b62265d9.js","sourcesContent":["var Buffer = require('safe-buffer').Buffer\nvar MD5 = require('md5.js')\n\n/* eslint-disable camelcase */\nfunction EVP_BytesToKey (password, salt, keyBits, ivLen) {\n  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')\n  if (salt) {\n    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')\n    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')\n  }\n\n  var keyLen = keyBits / 8\n  var key = Buffer.alloc(keyLen)\n  var iv = Buffer.alloc(ivLen || 0)\n  var tmp = Buffer.alloc(0)\n\n  while (keyLen > 0 || ivLen > 0) {\n    var hash = new MD5()\n    hash.update(tmp)\n    hash.update(password)\n    if (salt) hash.update(salt)\n    tmp = hash.digest()\n\n    var used = 0\n\n    if (keyLen > 0) {\n      var keyStart = key.length - keyLen\n      used = Math.min(keyLen, tmp.length)\n      tmp.copy(key, keyStart, 0, used)\n      keyLen -= used\n    }\n\n    if (used < tmp.length && ivLen > 0) {\n      var ivStart = iv.length - ivLen\n      var length = Math.min(ivLen, tmp.length - used)\n      tmp.copy(iv, ivStart, used, used + length)\n      ivLen -= length\n    }\n  }\n\n  tmp.fill(0)\n  return { key: key, iv: iv }\n}\n\nmodule.exports = EVP_BytesToKey\n"],"sourceRoot":""}