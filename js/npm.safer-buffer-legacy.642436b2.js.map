{"version":3,"sources":["webpack:///./node_modules/safer-buffer/safer.js"],"names":["key","buffer","Buffer","safer","hasOwnProperty","Safer","prototype","from","Uint8Array","value","encodingOrOffset","length","TypeError","alloc","size","fill","encoding","RangeError","buf","kStringMaxLength","process","binding","e","constants","MAX_LENGTH","kMaxLength","MAX_STRING_LENGTH","module","exports"],"mappings":"mHAAA,YAIA,IAKIA,EALAC,EAAS,EAAQ,QACjBC,EAASD,EAAOC,OAEhBC,EAAQ,GAIZ,IAAKH,KAAOC,EACLA,EAAOG,eAAeJ,IACf,eAARA,GAAgC,WAARA,IAC5BG,EAAMH,GAAOC,EAAOD,IAGtB,IAAIK,EAAQF,EAAMD,OAAS,GAC3B,IAAKF,KAAOE,EACLA,EAAOE,eAAeJ,IACf,gBAARA,GAAiC,oBAARA,IAC7BK,EAAML,GAAOE,EAAOF,IAqCtB,GAlCAG,EAAMD,OAAOI,UAAYJ,EAAOI,UAE3BD,EAAME,MAAQF,EAAME,OAASC,WAAWD,OAC3CF,EAAME,KAAO,SAAUE,EAAOC,EAAkBC,GAC9C,GAAqB,kBAAVF,EACT,MAAM,IAAIG,UAAU,yEAA2EH,GAEjG,GAAIA,GAAiC,qBAAjBA,EAAME,OACxB,MAAM,IAAIC,UAAU,yHAA2HH,GAEjJ,OAAOP,EAAOO,EAAOC,EAAkBC,KAItCN,EAAMQ,QACTR,EAAMQ,MAAQ,SAAUC,EAAMC,EAAMC,GAClC,GAAoB,kBAATF,EACT,MAAM,IAAIF,UAAU,oEAAsEE,GAE5F,GAAIA,EAAO,GAAKA,GAAQ,GAAK,GAAK,IAChC,MAAM,IAAIG,WAAW,cAAgBH,EAAO,kCAE9C,IAAII,EAAMhB,EAAOY,GAQjB,OAPKC,GAAwB,IAAhBA,EAAKJ,OAEa,kBAAbK,EAChBE,EAAIH,KAAKA,EAAMC,GAEfE,EAAIH,KAAKA,GAJTG,EAAIH,KAAK,GAMJG,KAINf,EAAMgB,iBACT,IACEhB,EAAMgB,iBAAmBC,EAAQC,QAAQ,UAAUF,iBACnD,MAAOG,IAMNnB,EAAMoB,YACTpB,EAAMoB,UAAY,CAChBC,WAAYrB,EAAMsB,YAEhBtB,EAAMgB,mBACRhB,EAAMoB,UAAUG,kBAAoBvB,EAAMgB,mBAI9CQ,EAAOC,QAAUzB,I","file":"js/npm.safer-buffer-legacy.642436b2.js","sourcesContent":["/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\nvar safer = {}\n\nvar key\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\n  safer[key] = buffer[key]\n}\n\nvar Safer = safer.Buffer = {}\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n  Safer[key] = Buffer[key]\n}\n\nsafer.Buffer.prototype = Buffer.prototype\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n    }\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n    }\n    return Buffer(value, encodingOrOffset, length)\n  }\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n    }\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n    }\n    var buf = Buffer(size)\n    if (!fill || fill.length === 0) {\n      buf.fill(0)\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n    return buf\n  }\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n  } catch (e) {\n    // we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  }\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n  }\n}\n\nmodule.exports = safer\n"],"sourceRoot":""}