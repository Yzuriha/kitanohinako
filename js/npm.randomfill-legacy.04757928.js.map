{"version":3,"sources":["webpack:///./node_modules/randomfill/browser.js"],"names":["oldBrowser","Error","safeBuffer","randombytes","Buffer","kBufferMaxLength","kMaxLength","crypto","global","msCrypto","kMaxUint32","Math","pow","assertOffset","offset","length","TypeError","RangeError","assertSize","size","randomFill","buf","cb","isBuffer","Uint8Array","actualFill","process","browser","ourBuf","buffer","uint","getRandomValues","nextTick","bytes","copy","err","randomFillSync","undefined","exports"],"mappings":"mHAAA,cAEA,SAASA,IACP,MAAM,IAAIC,MAAM,8GAElB,IAAIC,EAAa,EAAQ,QACrBC,EAAc,EAAQ,QACtBC,EAASF,EAAWE,OACpBC,EAAmBH,EAAWI,WAC9BC,EAASC,EAAOD,QAAUC,EAAOC,SACjCC,EAAaC,KAAKC,IAAI,EAAG,IAAM,EACnC,SAASC,EAAcC,EAAQC,GAC7B,GAAsB,kBAAXD,GAAuBA,IAAWA,EAC3C,MAAM,IAAIE,UAAU,2BAGtB,GAAIF,EAASJ,GAAcI,EAAS,EAClC,MAAM,IAAIE,UAAU,2BAGtB,GAAIF,EAAST,GAAoBS,EAASC,EACxC,MAAM,IAAIE,WAAW,uBAIzB,SAASC,EAAYC,EAAML,EAAQC,GACjC,GAAoB,kBAATI,GAAqBA,IAASA,EACvC,MAAM,IAAIH,UAAU,yBAGtB,GAAIG,EAAOT,GAAcS,EAAO,EAC9B,MAAM,IAAIH,UAAU,yBAGtB,GAAIG,EAAOL,EAASC,GAAUI,EAAOd,EACnC,MAAM,IAAIY,WAAW,oBAUzB,SAASG,EAAYC,EAAKP,EAAQK,EAAMG,GACtC,IAAKlB,EAAOmB,SAASF,MAAUA,aAAeb,EAAOgB,YACnD,MAAM,IAAIR,UAAU,iDAGtB,GAAsB,oBAAXF,EACTQ,EAAKR,EACLA,EAAS,EACTK,EAAOE,EAAIN,YACN,GAAoB,oBAATI,EAChBG,EAAKH,EACLA,EAAOE,EAAIN,OAASD,OACf,GAAkB,oBAAPQ,EAChB,MAAM,IAAIN,UAAU,oCAItB,OAFAH,EAAaC,EAAQO,EAAIN,QACzBG,EAAWC,EAAML,EAAQO,EAAIN,QACtBU,EAAWJ,EAAKP,EAAQK,EAAMG,GAGvC,SAASG,EAAYJ,EAAKP,EAAQK,EAAMG,GACtC,GAAII,EAAQC,QAAS,CACnB,IAAIC,EAASP,EAAIQ,OACbC,EAAO,IAAIN,WAAWI,EAAQd,EAAQK,GAE1C,OADAZ,EAAOwB,gBAAgBD,GACnBR,OACFI,EAAQM,UAAS,WACfV,EAAG,KAAMD,MAINA,EAET,IAAIC,EAAJ,CAUA,IAAIW,EAAQ9B,EAAYgB,GAExB,OADAc,EAAMC,KAAKb,EAAKP,GACTO,EAXLlB,EAAYgB,GAAM,SAAUgB,EAAKF,GAC/B,GAAIE,EACF,OAAOb,EAAGa,GAEZF,EAAMC,KAAKb,EAAKP,GAChBQ,EAAG,KAAMD,MAQf,SAASe,EAAgBf,EAAKP,EAAQK,GAIpC,GAHsB,qBAAXL,IACTA,EAAS,IAENV,EAAOmB,SAASF,MAAUA,aAAeb,EAAOgB,YACnD,MAAM,IAAIR,UAAU,iDAStB,OANAH,EAAaC,EAAQO,EAAIN,aAEZsB,IAATlB,IAAoBA,EAAOE,EAAIN,OAASD,GAE5CI,EAAWC,EAAML,EAAQO,EAAIN,QAEtBU,EAAWJ,EAAKP,EAAQK,GApE5BZ,GAAUA,EAAOwB,kBAAqBL,EAAQC,SACjDW,EAAQlB,WAAaA,EACrBkB,EAAQF,eAAiBA,IAEzBE,EAAQlB,WAAapB,EACrBsC,EAAQF,eAAiBpC,K","file":"js/npm.randomfill-legacy.04757928.js","sourcesContent":["'use strict'\n\nfunction oldBrowser () {\n  throw new Error('secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11')\n}\nvar safeBuffer = require('safe-buffer')\nvar randombytes = require('randombytes')\nvar Buffer = safeBuffer.Buffer\nvar kBufferMaxLength = safeBuffer.kMaxLength\nvar crypto = global.crypto || global.msCrypto\nvar kMaxUint32 = Math.pow(2, 32) - 1\nfunction assertOffset (offset, length) {\n  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare\n    throw new TypeError('offset must be a number')\n  }\n\n  if (offset > kMaxUint32 || offset < 0) {\n    throw new TypeError('offset must be a uint32')\n  }\n\n  if (offset > kBufferMaxLength || offset > length) {\n    throw new RangeError('offset out of range')\n  }\n}\n\nfunction assertSize (size, offset, length) {\n  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare\n    throw new TypeError('size must be a number')\n  }\n\n  if (size > kMaxUint32 || size < 0) {\n    throw new TypeError('size must be a uint32')\n  }\n\n  if (size + offset > length || size > kBufferMaxLength) {\n    throw new RangeError('buffer too small')\n  }\n}\nif ((crypto && crypto.getRandomValues) || !process.browser) {\n  exports.randomFill = randomFill\n  exports.randomFillSync = randomFillSync\n} else {\n  exports.randomFill = oldBrowser\n  exports.randomFillSync = oldBrowser\n}\nfunction randomFill (buf, offset, size, cb) {\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array')\n  }\n\n  if (typeof offset === 'function') {\n    cb = offset\n    offset = 0\n    size = buf.length\n  } else if (typeof size === 'function') {\n    cb = size\n    size = buf.length - offset\n  } else if (typeof cb !== 'function') {\n    throw new TypeError('\"cb\" argument must be a function')\n  }\n  assertOffset(offset, buf.length)\n  assertSize(size, offset, buf.length)\n  return actualFill(buf, offset, size, cb)\n}\n\nfunction actualFill (buf, offset, size, cb) {\n  if (process.browser) {\n    var ourBuf = buf.buffer\n    var uint = new Uint8Array(ourBuf, offset, size)\n    crypto.getRandomValues(uint)\n    if (cb) {\n      process.nextTick(function () {\n        cb(null, buf)\n      })\n      return\n    }\n    return buf\n  }\n  if (cb) {\n    randombytes(size, function (err, bytes) {\n      if (err) {\n        return cb(err)\n      }\n      bytes.copy(buf, offset)\n      cb(null, buf)\n    })\n    return\n  }\n  var bytes = randombytes(size)\n  bytes.copy(buf, offset)\n  return buf\n}\nfunction randomFillSync (buf, offset, size) {\n  if (typeof offset === 'undefined') {\n    offset = 0\n  }\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array')\n  }\n\n  assertOffset(offset, buf.length)\n\n  if (size === undefined) size = buf.length - offset\n\n  assertSize(size, offset, buf.length)\n\n  return actualFill(buf, offset, size)\n}\n"],"sourceRoot":""}