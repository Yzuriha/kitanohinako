{"version":3,"sources":["webpack:///./node_modules/node-fetch/browser.js"],"names":["getGlobal","self","window","global","Error","module","exports","fetch","default","bind","Headers","Request","Response"],"mappings":"gHAGA,IAAIA,EAAY,WAIf,GAAoB,qBAATC,KAAwB,OAAOA,KAC1C,GAAsB,qBAAXC,OAA0B,OAAOA,OAC5C,GAAsB,qBAAXC,EAA0B,OAAOA,EAC5C,MAAM,IAAIC,MAAM,mCAGbD,EAASH,IAEbK,EAAOC,QAAUA,EAAUH,EAAOI,MAG9BJ,EAAOI,QACVD,EAAQE,QAAUL,EAAOI,MAAME,KAAKN,IAGrCG,EAAQI,QAAUP,EAAOO,QACzBJ,EAAQK,QAAUR,EAAOQ,QACzBL,EAAQM,SAAWT,EAAOS","file":"js/npm.node-fetch-legacy.40a68d22.js","sourcesContent":["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nif (global.fetch) {\n\texports.default = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;"],"sourceRoot":""}