{"version":3,"sources":["webpack:///./node_modules/readable-stream/duplex-browser.js","webpack:///./node_modules/readable-stream/lib/_stream_transform.js","webpack:///./node_modules/readable-stream/writable-browser.js","webpack:///./node_modules/readable-stream/lib/internal/streams/stream-browser.js","webpack:///./node_modules/readable-stream/lib/internal/streams/destroy.js","webpack:///./node_modules/readable-stream/lib/internal/streams/BufferList.js","webpack:///./node_modules/readable-stream/lib/_stream_passthrough.js","webpack:///./node_modules/readable-stream/lib/_stream_readable.js","webpack:///./node_modules/readable-stream/lib/_stream_duplex.js","webpack:///./node_modules/readable-stream/passthrough.js","webpack:///./node_modules/readable-stream/transform.js","webpack:///./node_modules/readable-stream/lib/_stream_writable.js","webpack:///./node_modules/readable-stream/readable-browser.js"],"names":["module","exports","Transform","Duplex","util","Object","create","afterTransform","er","data","ts","this","_transformState","transforming","cb","writecb","emit","Error","writechunk","push","rs","_readableState","reading","needReadable","length","highWaterMark","_read","options","call","bind","needTransform","writeencoding","sync","transform","_transform","flush","_flush","on","prefinish","_this","done","stream","_writableState","inherits","prototype","chunk","encoding","_write","n","_destroy","err","_this2","err2","EventEmitter","pna","destroy","readableDestroyed","destroyed","writableDestroyed","errorEmitted","nextTick","emitErrorNT","undestroy","ended","endEmitted","ending","finished","self","_classCallCheck","instance","Constructor","TypeError","Buffer","copyBuffer","src","target","offset","copy","BufferList","head","tail","v","entry","next","unshift","shift","ret","clear","join","s","p","concat","alloc","allocUnsafe","i","inspect","custom","obj","constructor","name","PassThrough","Readable","isArray","ReadableState","EElistenerCount","emitter","type","listeners","Stream","OurUint8Array","global","Uint8Array","_uint8ArrayToBuffer","from","_isUint8Array","isBuffer","debugUtil","debug","debuglog","StringDecoder","destroyImpl","kProxyEvents","prependListener","event","fn","_events","isDuplex","objectMode","readableObjectMode","hwm","readableHwm","readableHighWaterMark","defaultHwm","Math","floor","buffer","pipes","pipesCount","flowing","emittedReadable","readableListening","resumeScheduled","defaultEncoding","awaitDrain","readingMore","decoder","readable","read","readableAddChunk","addToFront","skipChunkCheck","state","onEofChunk","chunkInvalid","getPrototypeOf","addChunk","write","maybeReadMore","needMoreData","emitReadable","undefined","defineProperty","get","set","value","_undestroy","isPaused","setEncoding","enc","MAX_HWM","computeNewHighWaterMark","howMuchToRead","end","emitReadable_","flow","maybeReadMore_","len","pipeOnDrain","nReadingNextTick","resume","resume_","fromList","fromListPartial","list","hasStrings","slice","copyFromBufferString","copyFromBuffer","c","str","nb","buf","endReadable","endReadableNT","indexOf","xs","x","l","parseInt","nOrig","doRead","pipe","dest","pipeOpts","doEnd","process","stdout","stderr","endFn","onend","unpipe","onunpipe","unpipeInfo","hasUnpiped","cleanup","once","ondrain","cleanedUp","removeListener","onclose","onfinish","onerror","ondata","needDrain","increasedAwaitDrain","pause","dests","index","splice","ev","res","addListener","wrap","paused","method","apply","arguments","enumerable","_fromList","objectKeys","keys","key","Writable","writable","allowHalfOpen","onEndNT","CorkedRequest","finish","onCorkedFinish","asyncWrite","browser","version","setImmediate","WritableState","internalUtil","deprecate","realHasInstance","nop","writableObjectMode","writableHwm","writableHighWaterMark","finalCalled","noDecode","decodeStrings","writing","corked","bufferProcessing","onwrite","writelen","bufferedRequest","lastBufferedRequest","pendingcb","prefinished","bufferedRequestCount","corkedRequestsFree","writev","_writev","final","_final","writeAfterEnd","validChunk","valid","decodeChunk","writeOrBuffer","isBuf","newChunk","last","callback","doWrite","onwriteError","finishMaybe","onwriteStateUpdate","needFinish","clearBuffer","afterWrite","onwriteDrain","Array","holder","count","allBuffers","callFinal","need","endWritable","corkReq","getBuffer","current","out","_","Symbol","hasInstance","Function","object","cork","uncork","setDefaultEncoding","toLowerCase"],"mappings":"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","file":"js/npm.readable-stream-legacy.4d1703f9.js","sourcesContent":["module.exports = require('./lib/_stream_duplex.js');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}","module.exports = require('./lib/_stream_writable.js');\n","module.exports = require('events').EventEmitter;\n","'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};","'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = require('safe-buffer').Buffer;\nvar util = require('util');\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};","module.exports = require('./readable').PassThrough\n","module.exports = require('./readable').Transform\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n"],"sourceRoot":""}