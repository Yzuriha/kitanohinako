{"version":3,"sources":["webpack:///./node_modules/google-p12-pem/build/src/index.js"],"names":["Object","defineProperty","exports","value","getPem","fs","forge","util_1","readFile","promisify","filename","callback","getPemAsync","then","pem","catch","err","encoding","keyp12","convertToPem","p12base64","p12Der","util","decode64","p12Asn1","asn1","fromDer","p12","pkcs12","pkcs12FromAsn1","bags","getBags","friendlyName","privateKey","key","pki","privateKeyToPem","replace","Error"],"mappings":"oHAOAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQE,YAAS,EACjB,MAAMC,EAAK,EAAQ,QACbC,EAAQ,EAAQ,QAChBC,EAAS,EAAQ,QACjBC,EAAWD,EAAOE,UAAUJ,EAAGG,UACrC,SAASJ,EAAOM,EAAUC,GACtB,IAAIA,EAMA,OAAOC,EAAYF,GALnBE,EAAYF,GACPG,KAAKC,GAAOH,EAAS,KAAMG,IAC3BC,MAAMC,GAAOL,EAASK,EAAK,OAOxC,SAASJ,EAAYF,GACjB,OAAOF,EAASE,EAAU,CAAEO,SAAU,WAAYJ,KAAKK,GAC5CC,EAAaD,IAQ5B,SAASC,EAAaC,GAClB,MAAMC,EAASf,EAAMgB,KAAKC,SAASH,GAC7BI,EAAUlB,EAAMmB,KAAKC,QAAQL,GAC7BM,EAAMrB,EAAMsB,OAAOC,eAAeL,EAAS,cAC3CM,EAAOH,EAAII,QAAQ,CAAEC,aAAc,eACzC,GAAIF,EAAKE,aAAc,CACnB,MAAMC,EAAaH,EAAKE,aAAa,GAAGE,IAClCpB,EAAMR,EAAM6B,IAAIC,gBAAgBH,GACtC,OAAOnB,EAAIuB,QAAQ,QAAS,MAG5B,MAAM,IAAIC,MAAM,gCAtBxBpC,EAAQE,OAASA","file":"js/npm.google-p12-pem-legacy.c660a981.js","sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPem = void 0;\nconst fs = require(\"fs\");\nconst forge = require(\"node-forge\");\nconst util_1 = require(\"util\");\nconst readFile = util_1.promisify(fs.readFile);\nfunction getPem(filename, callback) {\n    if (callback) {\n        getPemAsync(filename)\n            .then(pem => callback(null, pem))\n            .catch(err => callback(err, null));\n    }\n    else {\n        return getPemAsync(filename);\n    }\n}\nexports.getPem = getPem;\nfunction getPemAsync(filename) {\n    return readFile(filename, { encoding: 'base64' }).then(keyp12 => {\n        return convertToPem(keyp12);\n    });\n}\n/**\n * Converts a P12 in base64 encoding to a pem.\n * @param p12base64 String containing base64 encoded p12.\n * @returns a string containing the pem.\n */\nfunction convertToPem(p12base64) {\n    const p12Der = forge.util.decode64(p12base64);\n    const p12Asn1 = forge.asn1.fromDer(p12Der);\n    const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'notasecret');\n    const bags = p12.getBags({ friendlyName: 'privatekey' });\n    if (bags.friendlyName) {\n        const privateKey = bags.friendlyName[0].key;\n        const pem = forge.pki.privateKeyToPem(privateKey);\n        return pem.replace(/\\r\\n/g, '\\n');\n    }\n    else {\n        throw new Error('Unable to get friendly name.');\n    }\n}\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}