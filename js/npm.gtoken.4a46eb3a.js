(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["npm.gtoken"],{f447:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GoogleToken=void 0;const i=s("3e8f"),r=s("0321"),n=s("33ef"),o=s("df7c"),a=s("3022"),h=i.readFile?a.promisify(i.readFile):async()=>{throw new k("use key rather than keyFile.","MISSING_CREDENTIALS")},c="https://www.googleapis.com/oauth2/v4/token",l="https://accounts.google.com/o/oauth2/revoke?token=";class k extends Error{constructor(e,t){super(e),this.code=t}}let p;class d{constructor(e){this.configure(e)}get accessToken(){return this.rawToken?this.rawToken.access_token:void 0}get idToken(){return this.rawToken?this.rawToken.id_token:void 0}get tokenType(){return this.rawToken?this.rawToken.token_type:void 0}get refreshToken(){return this.rawToken?this.rawToken.refresh_token:void 0}hasExpired(){const e=(new Date).getTime();return!this.rawToken||!this.expiresAt||e>=this.expiresAt}isTokenExpiring(){var e;const t=(new Date).getTime(),s=null!==(e=this.eagerRefreshThresholdMillis)&&void 0!==e?e:0;return!this.rawToken||!this.expiresAt||this.expiresAt<=t+s}getToken(e,t={}){if("object"===typeof e&&(t=e,e=void 0),t=Object.assign({forceRefresh:!1},t),!e)return this.getTokenAsync(t);{const s=e;this.getTokenAsync(t).then(e=>s(null,e),e)}}async getCredentials(e){const t=o.extname(e);switch(t){case".json":{const t=await h(e,"utf8"),s=JSON.parse(t),i=s.private_key,r=s.client_email;if(!i||!r)throw new k("private_key and client_email are required.","MISSING_CREDENTIALS");return{privateKey:i,clientEmail:r}}case".der":case".crt":case".pem":{const t=await h(e,"utf8");return{privateKey:t}}case".p12":case".pfx":{p||(p=(await Promise.resolve().then(()=>s("b9cf"))).getPem);const t=await p(e);return{privateKey:t}}default:throw new k("Unknown certificate type. Type is determined based on file extension. Current supported extensions are *.json, *.pem, and *.p12.","UNKNOWN_CERTIFICATE_TYPE")}}async getTokenAsync(e){if(this.inFlightRequest&&!e.forceRefresh)return this.inFlightRequest;try{return await(this.inFlightRequest=this.getTokenAsyncInner(e))}finally{this.inFlightRequest=void 0}}async getTokenAsyncInner(e){if(!1===this.isTokenExpiring()&&!1===e.forceRefresh)return Promise.resolve(this.rawToken);if(!this.key&&!this.keyFile)throw new Error("No key or keyFile set.");if(!this.key&&this.keyFile){const e=await this.getCredentials(this.keyFile);this.key=e.privateKey,this.iss=e.clientEmail||this.iss,e.clientEmail||this.ensureEmail()}return this.requestToken()}ensureEmail(){if(!this.iss)throw new k("email is required.","MISSING_CREDENTIALS")}revokeToken(e){if(!e)return this.revokeTokenAsync();this.revokeTokenAsync().then(()=>e(),e)}async revokeTokenAsync(){if(!this.accessToken)throw new Error("No token to revoke.");const e=l+this.accessToken;await r.request({url:e}),this.configure({email:this.iss,sub:this.sub,key:this.key,keyFile:this.keyFile,scope:this.scope,additionalClaims:this.additionalClaims})}configure(e={}){this.keyFile=e.keyFile,this.key=e.key,this.rawToken=void 0,this.iss=e.email||e.iss,this.sub=e.sub,this.additionalClaims=e.additionalClaims,"object"===typeof e.scope?this.scope=e.scope.join(" "):this.scope=e.scope,this.eagerRefreshThresholdMillis=e.eagerRefreshThresholdMillis}async requestToken(){const e=Math.floor((new Date).getTime()/1e3),t=this.additionalClaims||{},s=Object.assign({iss:this.iss,scope:this.scope,aud:c,exp:e+3600,iat:e,sub:this.sub},t),i=n.sign({header:{alg:"RS256"},payload:s,secret:this.key});try{const t=await r.request({method:"POST",url:c,data:{grant_type:"urn:ietf:params:oauth:grant-type:jwt-bearer",assertion:i},headers:{"Content-Type":"application/x-www-form-urlencoded"},responseType:"json"});return this.rawToken=t.data,this.expiresAt=null===t.data.expires_in||void 0===t.data.expires_in?void 0:1e3*(e+t.data.expires_in),this.rawToken}catch(o){this.rawToken=void 0,this.tokenExpires=void 0;const e=o.response&&o.response.data?o.response.data:{};if(e.error){const t=e.error_description?": "+e.error_description:"";o.message=`${e.error}${t}`}throw o}}}t.GoogleToken=d}}]);
//# sourceMappingURL=npm.gtoken.4a46eb3a.js.map