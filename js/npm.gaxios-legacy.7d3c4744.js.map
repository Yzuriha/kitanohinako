{"version":3,"sources":["webpack:///./node_modules/gaxios/build/src/index.js","webpack:///./node_modules/gaxios/build/src/retry.js","webpack:///./node_modules/gaxios/build/src/common.js","webpack:///./node_modules/gaxios/build/src/gaxios.js","webpack:///./node_modules/gaxios/node_modules/is-stream/index.js"],"names":["Object","defineProperty","exports","value","request","instance","Gaxios","gaxios_1","enumerable","get","common_1","async","opts","GaxiosError","getRetryConfig","err","_a","config","getConfig","retry","shouldRetry","currentRetryAttempt","undefined","httpMethodsToRetry","noResponseRetries","retryRanges","statusCodesToRetry","retryConfig","shouldRetryFn","shouldRetryRequest","retryDelay","delay","Math","pow","backoff","Promise","resolve","setTimeout","onRetryAttempt","name","response","method","indexOf","toUpperCase","status","isInRange","min","max","Error","message","options","super","this","code","toString","__importDefault","mod","__esModule","extend_1","https_1","node_fetch_1","querystring_1","is_stream_1","url_1","retry_1","fetch","hasFetch","window","default","hasWindow","hasBuffer","Buffer","hasHeader","header","getHeader","toLowerCase","key","keys","headers","HttpsProxyAgent","loadProxy","proxy","HTTPS_PROXY","https_proxy","HTTP_PROXY","http_proxy","skipProxy","url","noProxyEnv","NO_PROXY","no_proxy","noProxyUrls","split","parsedURL","URL","find","startsWith","replace","hostname","endsWith","origin","getProxy","defaults","agentCache","Map","validateOpts","_request","fetchImpl","fetchImplementation","res","data","getResponseData","translateResponse","translatedResponse","adapter","_defaultAdapter","bind","validateStatus","e","responseType","body","text","JSON","parse","arrayBuffer","blob","baseUrl","baseURL","paramsSerializer","params","length","additionalQueryParams","slice","prefix","includes","maxContentLength","size","maxRedirects","follow","readable","isBuffer","stringify","has","agent","cert","port","host","protocol","set","Agent","forEach","statusText","responseURL","isStream","stream","pipe","writable","_write","_writableState","_read","_readableState","duplex","transform","_transform","module"],"mappings":"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","file":"js/npm.gaxios-legacy.7d3c4744.js","sourcesContent":["\"use strict\";\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.request = exports.instance = exports.Gaxios = void 0;\nconst gaxios_1 = require(\"./gaxios\");\nObject.defineProperty(exports, \"Gaxios\", { enumerable: true, get: function () { return gaxios_1.Gaxios; } });\nvar common_1 = require(\"./common\");\nObject.defineProperty(exports, \"GaxiosError\", { enumerable: true, get: function () { return common_1.GaxiosError; } });\n/**\n * The default instance used when the `request` method is directly\n * invoked.\n */\nexports.instance = new gaxios_1.Gaxios();\n/**\n * Make an HTTP request using the given options.\n * @param opts Options for the request\n */\nasync function request(opts) {\n    return exports.instance.request(opts);\n}\nexports.request = request;\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRetryConfig = void 0;\nasync function getRetryConfig(err) {\n    var _a;\n    let config = getConfig(err);\n    if (!err || !err.config || (!config && !err.config.retry)) {\n        return { shouldRetry: false };\n    }\n    config = config || {};\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    config.retry =\n        config.retry === undefined || config.retry === null ? 3 : config.retry;\n    config.httpMethodsToRetry = config.httpMethodsToRetry || [\n        'GET',\n        'HEAD',\n        'PUT',\n        'OPTIONS',\n        'DELETE',\n    ];\n    config.noResponseRetries =\n        config.noResponseRetries === undefined || config.noResponseRetries === null\n            ? 2\n            : config.noResponseRetries;\n    // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n    const retryRanges = [\n        // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n        // 1xx - Retry (Informational, request still processing)\n        // 2xx - Do not retry (Success)\n        // 3xx - Do not retry (Redirect)\n        // 4xx - Do not retry (Client errors)\n        // 429 - Retry (\"Too Many Requests\")\n        // 5xx - Retry (Server errors)\n        [100, 199],\n        [429, 429],\n        [500, 599],\n    ];\n    config.statusCodesToRetry = config.statusCodesToRetry || retryRanges;\n    // Put the config back into the err\n    err.config.retryConfig = config;\n    // Determine if we should retry the request\n    const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n    if (!(await shouldRetryFn(err))) {\n        return { shouldRetry: false, config: err.config };\n    }\n    // Calculate time to wait with exponential backoff.\n    // If this is the first retry, look for a configured retryDelay.\n    const retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100;\n    // Formula: retryDelay + ((2^c - 1 / 2) * 1000)\n    const delay = retryDelay + ((Math.pow(2, config.currentRetryAttempt) - 1) / 2) * 1000;\n    // We're going to retry!  Incremenent the counter.\n    err.config.retryConfig.currentRetryAttempt += 1;\n    // Create a promise that invokes the retry after the backOffDelay\n    const backoff = new Promise(resolve => {\n        setTimeout(resolve, delay);\n    });\n    // Notify the user if they added an `onRetryAttempt` handler\n    if (config.onRetryAttempt) {\n        config.onRetryAttempt(err);\n    }\n    // Return the promise in which recalls Gaxios to retry the request\n    await backoff;\n    return { shouldRetry: true, config: err.config };\n}\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\nfunction shouldRetryRequest(err) {\n    const config = getConfig(err);\n    // node-fetch raises an AbortError if signaled:\n    // https://github.com/bitinn/node-fetch#request-cancellation-with-abortsignal\n    if (err.name === 'AbortError') {\n        return false;\n    }\n    // If there's no config, or retries are disabled, return.\n    if (!config || config.retry === 0) {\n        return false;\n    }\n    // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n    if (!err.response &&\n        (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n        return false;\n    }\n    // Only retry with configured HttpMethods.\n    if (!err.config.method ||\n        config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n        return false;\n    }\n    // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n    if (err.response && err.response.status) {\n        let isInRange = false;\n        for (const [min, max] of config.statusCodesToRetry) {\n            const status = err.response.status;\n            if (status >= min && status <= max) {\n                isInRange = true;\n                break;\n            }\n        }\n        if (!isInRange) {\n            return false;\n        }\n    }\n    // If we are out of retry attempts, return\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    if (config.currentRetryAttempt >= config.retry) {\n        return false;\n    }\n    return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\nfunction getConfig(err) {\n    if (err && err.config && err.config.retryConfig) {\n        return err.config.retryConfig;\n    }\n    return;\n}\n//# sourceMappingURL=retry.js.map","\"use strict\";\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GaxiosError = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\nclass GaxiosError extends Error {\n    constructor(message, options, response) {\n        super(message);\n        this.response = response;\n        this.config = options;\n        this.code = response.status.toString();\n    }\n}\nexports.GaxiosError = GaxiosError;\n//# sourceMappingURL=common.js.map","\"use strict\";\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Gaxios = void 0;\nconst extend_1 = __importDefault(require(\"extend\"));\nconst https_1 = require(\"https\");\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\nconst querystring_1 = __importDefault(require(\"querystring\"));\nconst is_stream_1 = __importDefault(require(\"is-stream\"));\nconst url_1 = require(\"url\");\nconst common_1 = require(\"./common\");\nconst retry_1 = require(\"./retry\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fetch = hasFetch() ? window.fetch : node_fetch_1.default;\nfunction hasWindow() {\n    return typeof window !== 'undefined' && !!window;\n}\nfunction hasFetch() {\n    return hasWindow() && !!window.fetch;\n}\nfunction hasBuffer() {\n    return typeof Buffer !== 'undefined';\n}\nfunction hasHeader(options, header) {\n    return !!getHeader(options, header);\n}\nfunction getHeader(options, header) {\n    header = header.toLowerCase();\n    for (const key of Object.keys((options === null || options === void 0 ? void 0 : options.headers) || {})) {\n        if (header === key.toLowerCase()) {\n            return options.headers[key];\n        }\n    }\n    return undefined;\n}\nlet HttpsProxyAgent;\nfunction loadProxy() {\n    const proxy = process.env.HTTPS_PROXY ||\n        process.env.https_proxy ||\n        process.env.HTTP_PROXY ||\n        process.env.http_proxy;\n    if (proxy) {\n        HttpsProxyAgent = require('https-proxy-agent');\n    }\n    return proxy;\n}\nloadProxy();\nfunction skipProxy(url) {\n    var _a;\n    const noProxyEnv = (_a = process.env.NO_PROXY) !== null && _a !== void 0 ? _a : process.env.no_proxy;\n    if (!noProxyEnv) {\n        return false;\n    }\n    const noProxyUrls = noProxyEnv.split(',');\n    const parsedURL = new url_1.URL(url);\n    return !!noProxyUrls.find(url => {\n        if (url.startsWith('*.') || url.startsWith('.')) {\n            url = url.replace('*', '');\n            return parsedURL.hostname.endsWith(url);\n        }\n        else {\n            return url === parsedURL.origin || url === parsedURL.hostname;\n        }\n    });\n}\n// Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\nfunction getProxy(url) {\n    // If there is a match between the no_proxy env variables and the url, then do not proxy\n    if (skipProxy(url)) {\n        return undefined;\n        // If there is not a match between the no_proxy env variables and the url, check to see if there should be a proxy\n    }\n    else {\n        return loadProxy();\n    }\n}\nclass Gaxios {\n    /**\n     * The Gaxios class is responsible for making HTTP requests.\n     * @param defaults The default set of options to be used for this instance.\n     */\n    constructor(defaults) {\n        this.agentCache = new Map();\n        this.defaults = defaults || {};\n    }\n    /**\n     * Perform an HTTP request with the given options.\n     * @param opts Set of HTTP options that will be used for this HTTP request.\n     */\n    async request(opts = {}) {\n        opts = this.validateOpts(opts);\n        return this._request(opts);\n    }\n    async _defaultAdapter(opts) {\n        const fetchImpl = opts.fetchImplementation || fetch;\n        const res = (await fetchImpl(opts.url, opts));\n        const data = await this.getResponseData(opts, res);\n        return this.translateResponse(opts, res, data);\n    }\n    /**\n     * Internal, retryable version of the `request` method.\n     * @param opts Set of HTTP options that will be used for this HTTP request.\n     */\n    async _request(opts = {}) {\n        try {\n            let translatedResponse;\n            if (opts.adapter) {\n                translatedResponse = await opts.adapter(opts, this._defaultAdapter.bind(this));\n            }\n            else {\n                translatedResponse = await this._defaultAdapter(opts);\n            }\n            if (!opts.validateStatus(translatedResponse.status)) {\n                throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);\n            }\n            return translatedResponse;\n        }\n        catch (e) {\n            const err = e;\n            err.config = opts;\n            const { shouldRetry, config } = await retry_1.getRetryConfig(e);\n            if (shouldRetry && config) {\n                err.config.retryConfig.currentRetryAttempt =\n                    config.retryConfig.currentRetryAttempt;\n                return this._request(err.config);\n            }\n            throw err;\n        }\n    }\n    async getResponseData(opts, res) {\n        switch (opts.responseType) {\n            case 'stream':\n                return res.body;\n            case 'json': {\n                let data = await res.text();\n                try {\n                    data = JSON.parse(data);\n                }\n                catch (_a) {\n                    // continue\n                }\n                return data;\n            }\n            case 'arraybuffer':\n                return res.arrayBuffer();\n            case 'blob':\n                return res.blob();\n            default:\n                return res.text();\n        }\n    }\n    /**\n     * Validates the options, and merges them with defaults.\n     * @param opts The original options passed from the client.\n     */\n    validateOpts(options) {\n        const opts = extend_1.default(true, {}, this.defaults, options);\n        if (!opts.url) {\n            throw new Error('URL is required.');\n        }\n        // baseUrl has been deprecated, remove in 2.0\n        const baseUrl = opts.baseUrl || opts.baseURL;\n        if (baseUrl) {\n            opts.url = baseUrl + opts.url;\n        }\n        opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n        if (opts.params && Object.keys(opts.params).length > 0) {\n            let additionalQueryParams = opts.paramsSerializer(opts.params);\n            if (additionalQueryParams.startsWith('?')) {\n                additionalQueryParams = additionalQueryParams.slice(1);\n            }\n            const prefix = opts.url.includes('?') ? '&' : '?';\n            opts.url = opts.url + prefix + additionalQueryParams;\n        }\n        if (typeof options.maxContentLength === 'number') {\n            opts.size = options.maxContentLength;\n        }\n        if (typeof options.maxRedirects === 'number') {\n            opts.follow = options.maxRedirects;\n        }\n        opts.headers = opts.headers || {};\n        if (opts.data) {\n            if (is_stream_1.default.readable(opts.data)) {\n                opts.body = opts.data;\n            }\n            else if (hasBuffer() && Buffer.isBuffer(opts.data)) {\n                // Do not attempt to JSON.stringify() a Buffer:\n                opts.body = opts.data;\n                if (!hasHeader(opts, 'Content-Type')) {\n                    opts.headers['Content-Type'] = 'application/json';\n                }\n            }\n            else if (typeof opts.data === 'object') {\n                // If www-form-urlencoded content type has been set, but data is\n                // provided as an object, serialize the content using querystring:\n                if (getHeader(opts, 'content-type') ===\n                    'application/x-www-form-urlencoded') {\n                    opts.body = opts.paramsSerializer(opts.data);\n                }\n                else {\n                    if (!hasHeader(opts, 'Content-Type')) {\n                        opts.headers['Content-Type'] = 'application/json';\n                    }\n                    opts.body = JSON.stringify(opts.data);\n                }\n            }\n            else {\n                opts.body = opts.data;\n            }\n        }\n        opts.validateStatus = opts.validateStatus || this.validateStatus;\n        opts.responseType = opts.responseType || 'json';\n        if (!opts.headers['Accept'] && opts.responseType === 'json') {\n            opts.headers['Accept'] = 'application/json';\n        }\n        opts.method = opts.method || 'GET';\n        const proxy = getProxy(opts.url);\n        if (proxy) {\n            if (this.agentCache.has(proxy)) {\n                opts.agent = this.agentCache.get(proxy);\n            }\n            else {\n                // Proxy is being used in conjunction with mTLS.\n                if (opts.cert && opts.key) {\n                    const parsedURL = new url_1.URL(proxy);\n                    opts.agent = new HttpsProxyAgent({\n                        port: parsedURL.port,\n                        host: parsedURL.host,\n                        protocol: parsedURL.protocol,\n                        cert: opts.cert,\n                        key: opts.key,\n                    });\n                }\n                else {\n                    opts.agent = new HttpsProxyAgent(proxy);\n                }\n                this.agentCache.set(proxy, opts.agent);\n            }\n        }\n        else if (opts.cert && opts.key) {\n            // Configure client for mTLS:\n            if (this.agentCache.has(opts.key)) {\n                opts.agent = this.agentCache.get(opts.key);\n            }\n            else {\n                opts.agent = new https_1.Agent({\n                    cert: opts.cert,\n                    key: opts.key,\n                });\n                this.agentCache.set(opts.key, opts.agent);\n            }\n        }\n        return opts;\n    }\n    /**\n     * By default, throw for any non-2xx status code\n     * @param status status code from the HTTP response\n     */\n    validateStatus(status) {\n        return status >= 200 && status < 300;\n    }\n    /**\n     * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n     * @param params key value pars to encode\n     */\n    paramsSerializer(params) {\n        return querystring_1.default.stringify(params);\n    }\n    translateResponse(opts, res, data) {\n        // headers need to be converted from a map to an obj\n        const headers = {};\n        res.headers.forEach((value, key) => {\n            headers[key] = value;\n        });\n        return {\n            config: opts,\n            data: data,\n            headers,\n            status: res.status,\n            statusText: res.statusText,\n            // XMLHttpRequestLike\n            request: {\n                responseURL: res.url,\n            },\n        };\n    }\n}\nexports.Gaxios = Gaxios;\n//# sourceMappingURL=gaxios.js.map","'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function';\n\nmodule.exports = isStream;\n"],"sourceRoot":""}